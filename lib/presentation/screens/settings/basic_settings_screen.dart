import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'dart:async';
import '../../providers/app_state_provider.dart';
import '../../providers/voice_provider.dart';
import '../../widgets/common/copyable_error_widget.dart';

/// Functional settings screen with interactive buttons
class BasicSettingsScreen extends StatefulWidget {
  const BasicSettingsScreen({super.key});

  @override
  State<BasicSettingsScreen> createState() => _BasicSettingsScreenState();
}

class _BasicSettingsScreenState extends State<BasicSettingsScreen> {
  bool _soundEffectsEnabled = true;

  @override
  void initState() {
    super.initState();
    _loadExistingApiKey();
  }

  Future<void> _loadExistingApiKey() async {
    // Force reload the API key from persistent storage
    final appState = context.read<AppStateProvider>();
    await appState.initialize(); // Reload settings to ensure API key is current
  }

  void _showThemeDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Ch·ªçn giao di·ªán'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            children: [
              ListTile(
                leading: const Icon(Icons.brightness_7),
                title: const Text('S√°ng'),
                onTap: () {
                  context.read<AppStateProvider>().setTheme(AppTheme.light);
                  Navigator.pop(context);
                },
              ),
              ListTile(
                leading: const Icon(Icons.brightness_4),
                title: const Text('T·ªëi'),
                onTap: () {
                  context.read<AppStateProvider>().setTheme(AppTheme.dark);
                  Navigator.pop(context);
                },
              ),
              ListTile(
                leading: const Icon(Icons.brightness_auto),
                title: const Text('T·ª± ƒë·ªông'),
                onTap: () {
                  context.read<AppStateProvider>().setTheme(AppTheme.system);
                  Navigator.pop(context);
                },
              ),
            ],
          ),
        );
      },
    );
  }

  void _showStorageDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Qu·∫£n l√Ω l∆∞u tr·ªØ'),
          content: const Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('D·ªØ li·ªáu ƒë√£ l∆∞u:'),
              SizedBox(height: 8),
              Text('‚Ä¢ C·∫•u h√¨nh avatar: 5 MB'),
              Text('‚Ä¢ Gi·ªçng n√≥i: 12 MB'),
              Text('‚Ä¢ Cache: 3 MB'),
              SizedBox(height: 16),
              Text('T·ªïng c·ªông: 20 MB'),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('X√≥a cache'),
            ),
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('ƒê√≥ng'),
            ),
          ],
        );
      },
    );
  }

  void _showApiKeyDialog() {
    final TextEditingController apiKeyController = TextEditingController();
    final appState = context.read<AppStateProvider>();
    final voiceProvider = context.read<VoiceProvider>();
    
    // Pre-populate with existing API key if available
    if (appState.apiKey != null) {
      apiKeyController.text = appState.apiKey!;
    }

    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('C·∫•u h√¨nh API Key'),
          content: Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              const Text(
                'Nh·∫≠p API Key ElevenLabs:',
                style: TextStyle(fontWeight: FontWeight.w500),
              ),
              const SizedBox(height: 12),
              TextField(
                controller: apiKeyController,
                decoration: const InputDecoration(
                  hintText: 'sk-...',
                  border: OutlineInputBorder(),
                  helperText: 'API key t·ª´ ElevenLabs dashboard',
                ),
                obscureText: true,
                maxLines: 1,
              ),
              const SizedBox(height: 16),
              Container(
                padding: const EdgeInsets.all(12),
                decoration: BoxDecoration(
                  color: Theme.of(context).colorScheme.surfaceContainerHighest,
                  borderRadius: BorderRadius.circular(8),
                ),
                child: const Column(
                  crossAxisAlignment: CrossAxisAlignment.start,
                  children: [
                    Text(
                      'üí° H∆∞·ªõng d·∫´n:',
                      style: TextStyle(fontWeight: FontWeight.w500),
                    ),
                    SizedBox(height: 4),
                    Text('1. Truy c·∫≠p elevenlabs.io'),
                    Text('2. ƒêƒÉng nh·∫≠p v√† v√†o Settings'),
                    Text('3. Copy API Key t·ª´ ph·∫ßn API'),
                    Text('4. Paste v√†o √¥ tr√™n'),
                  ],
                ),
              ),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('H·ªßy'),
            ),
            if (appState.hasValidApiKey)
              TextButton(
                onPressed: () async {
                  // Clear API key from AppStateProvider
                  appState.clearApiKey();
                  
                  // Clear voice provider cache
                  await voiceProvider.clearCache();
                  
                  if (mounted) {
                    // ignore: use_build_context_synchronously
                    Navigator.pop(context);
                  }
                  
                  // Use a delayed execution to ensure the context is still valid
                  Future.delayed(const Duration(milliseconds: 100), () {
                    if (mounted) {
                      // ignore: use_build_context_synchronously
                      ScaffoldMessenger.of(context).showSnackBar(
                        const SnackBar(
                          content: Text('ƒê√£ x√≥a API Key'),
                          duration: Duration(seconds: 2),
                        ),
                      );
                    }
                  });
                },
                child: const Text('X√≥a'),
              ),
            ElevatedButton(
              onPressed: () async {
                final apiKey = apiKeyController.text.trim();
                if (apiKey.isNotEmpty) {
                  try {
                    // Show loading state
                    showDialog(
                      context: context,
                      barrierDismissible: false,
                      builder: (context) => const Center(
                        child: CircularProgressIndicator(),
                      ),
                    );
                    
                    // Validate the API key using the existing VoiceRepository
                    final isValid = await voiceProvider.validateApiKey(apiKey);
                    
                    // Close loading dialog
                    if (context.mounted) Navigator.pop(context);
                    
                    // Close API key dialog
                    if (context.mounted) Navigator.pop(context);
                    
                    if (isValid) {
                      // Save to AppStateProvider after validation - this ensures both storages are synced
                      appState.setApiKey(apiKey);
                      
                      if (context.mounted) {
                        ScaffoldMessenger.of(context).showSnackBar(
                          const SnackBar(
                            content: Text('‚úÖ API Key h·ª£p l·ªá v√† ƒë√£ l∆∞u th√†nh c√¥ng'),
                            duration: Duration(seconds: 3),
                            backgroundColor: Colors.green,
                          ),
                        );
                        
                        // Trigger voice reload using the existing provider
                        await voiceProvider.refresh();
                      }
                    } else {
                      if (context.mounted) {
                        _showApiKeyValidationError('API Key kh√¥ng h·ª£p l·ªá. Vui l√≤ng ki·ªÉm tra:\n‚Ä¢ API key c√≥ ƒë√∫ng ƒë·ªãnh d·∫°ng sk-...\n‚Ä¢ API key ch∆∞a h·∫øt h·∫°n\n‚Ä¢ T√†i kho·∫£n ElevenLabs c√≤n ho·∫°t ƒë·ªông');
                      }
                    }
                  } catch (e) {
                    // Close any open dialogs
                    if (context.mounted) Navigator.pop(context);
                    if (context.mounted) Navigator.pop(context);
                    
                    if (context.mounted) {
                      _showApiKeySaveError(e.toString());
                    }
                  }
                } else {
                  if (mounted) {
                    ScaffoldMessenger.of(context).showSnackBar(
                      const SnackBar(
                        content: Text('Vui l√≤ng nh·∫≠p API Key'),
                        duration: Duration(seconds: 2),
                      ),
                    );
                  }
                }
              },
              child: const Text('L∆∞u'),
            ),
          ],
        );
      },
    );
  }

  void _showAppInfoDialog() {
    showDialog(
      context: context,
      builder: (BuildContext context) {
        return AlertDialog(
          title: const Text('Th√¥ng tin ·ª©ng d·ª•ng'),
          content: const Column(
            mainAxisSize: MainAxisSize.min,
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              Text('Avatar Config App'),
              SizedBox(height: 8),
              Text('Phi√™n b·∫£n: 1.0.0'),
              Text('Build: 2024.12.01'),
              SizedBox(height: 16),
              Text('Nh√† ph√°t tri·ªÉn: Avatar Team'),
              Text('Email: support@avatar.app'),
            ],
          ),
          actions: [
            TextButton(
              onPressed: () => Navigator.pop(context),
              child: const Text('ƒê√≥ng'),
            ),
          ],
        );
      },
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('C√†i ƒë·∫∑t'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(16.0),
        child: Column(
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              'M√†n h√¨nh c√†i ƒë·∫∑t',
              style: Theme.of(context).textTheme.headlineSmall?.copyWith(
                fontWeight: FontWeight.bold,
              ),
            ),
            const SizedBox(height: 20),
            
            // API Key Configuration
            Consumer<AppStateProvider>(
              builder: (context, appState, child) {
                return Card(
                  child: ListTile(
                    leading: const Icon(Icons.vpn_key),
                    title: const Text('API Key'),
                    subtitle: Text(
                      appState.hasValidApiKey
                        ? 'API Key ƒë√£ ƒë∆∞·ª£c c·∫•u h√¨nh'
                        : 'Ch∆∞a c·∫•u h√¨nh API Key'
                    ),
                    trailing: Row(
                      mainAxisSize: MainAxisSize.min,
                      children: [
                        if (appState.hasValidApiKey)
                          Icon(
                            Icons.check_circle,
                            color: Theme.of(context).colorScheme.primary,
                            size: 20,
                          ),
                        const SizedBox(width: 8),
                        const Icon(Icons.arrow_forward_ios),
                      ],
                    ),
                    onTap: _showApiKeyDialog,
                  ),
                );
              },
            ),
            const SizedBox(height: 10),
            
            // Theme Settings
            Card(
              child: ListTile(
                leading: const Icon(Icons.palette),
                title: const Text('Giao di·ªán'),
                subtitle: const Text('Ch·ªß ƒë·ªÅ v√† ng√¥n ng·ªØ'),
                trailing: const Icon(Icons.arrow_forward_ios),
                onTap: _showThemeDialog,
              ),
            ),
            const SizedBox(height: 10),
            
            // Sound Settings
            Card(
              child: ListTile(
                leading: const Icon(Icons.volume_up),
                title: const Text('√Çm thanh'),
                subtitle: const Text('Hi·ªáu ·ª©ng √¢m thanh'),
                trailing: Switch(
                  value: _soundEffectsEnabled,
                  onChanged: (bool value) {
                    setState(() {
                      _soundEffectsEnabled = value;
                    });
                    
                    // Show feedback
                    if (mounted) {
                      ScaffoldMessenger.of(context).showSnackBar(
                        SnackBar(
                          content: Text(
                            value
                              ? 'ƒê√£ b·∫≠t hi·ªáu ·ª©ng √¢m thanh'
                              : 'ƒê√£ t·∫Øt hi·ªáu ·ª©ng √¢m thanh'
                          ),
                          duration: const Duration(seconds: 2),
                        ),
                      );
                    }
                  },
                ),
              ),
            ),
            const SizedBox(height: 10),
            
            // Storage Settings
            Card(
              child: ListTile(
                leading: const Icon(Icons.storage),
                title: const Text('L∆∞u tr·ªØ'),
                subtitle: const Text('Qu·∫£n l√Ω d·ªØ li·ªáu'),
                trailing: const Icon(Icons.arrow_forward_ios),
                onTap: _showStorageDialog,
              ),
            ),
            const SizedBox(height: 10),
            
            // App Info
            Card(
              child: ListTile(
                leading: const Icon(Icons.info),
                title: const Text('Th√¥ng tin ·ª©ng d·ª•ng'),
                subtitle: const Text('Phi√™n b·∫£n 1.0.0'),
                trailing: const Icon(Icons.arrow_forward_ios),
                onTap: _showAppInfoDialog,
              ),
            ),
          ],
        ),
      ),
    );
  }

  // Error handling methods for API key functionality
  void _showApiKeyValidationError(String errorMessage) {
    CopyableErrorDialog.show(
      context,
      errorMessage: errorMessage,
      title: 'L·ªói x√°c th·ª±c API Key',
      icon: Icons.vpn_key_off,
    );
  }

  void _showApiKeySaveError(String error) {
    final detailedError = '''
L·ªói khi l∆∞u API Key:

Chi ti·∫øt l·ªói:
$error

C√°c b∆∞·ªõc kh·∫Øc ph·ª•c:
1. Ki·ªÉm tra k·∫øt n·ªëi internet
2. ƒê·∫£m b·∫£o API key ƒë√∫ng ƒë·ªãnh d·∫°ng
3. Th·ª≠ l·∫°i sau v√†i ph√∫t
4. Li√™n h·ªá h·ªó tr·ª£ n·∫øu l·ªói ti·∫øp di·ªÖn
    ''';
    
    CopyableErrorDialog.show(
      context,
      errorMessage: detailedError,
      title: 'L·ªói l∆∞u API Key',
      icon: Icons.save_alt,
    );
  }
}