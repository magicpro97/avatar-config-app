import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:uuid/uuid.dart';
import 'package:http/http.dart' as http;
import '../../providers/avatar_provider.dart';
import '../../providers/voice_provider.dart';
import '../../../domain/entities/avatar_configuration.dart';
import '../../../domain/entities/voice.dart';
import '../../../domain/entities/personality.dart';
import '../../../presentation/widgets/avatar/avatar_display_widget.dart';
import 'widgets/chat_message_widget.dart';
import '../../../data/services/personality_service.dart';
import '../../../data/services/api_config_service.dart';
import '../../../core/network/api_client.dart';
import '../../../presentation/widgets/audio/voice_chat_widget.dart';

/// Demo chat screen that showcases avatar and voice configuration functionality
class DemoChatScreen extends StatefulWidget {
  const DemoChatScreen({super.key});

  @override
  State<DemoChatScreen> createState() => _DemoChatScreenState();
}

class _DemoChatScreenState extends State<DemoChatScreen> {
  final TextEditingController _messageController = TextEditingController();
  final ScrollController _scrollController = ScrollController();
  final List<Map<String, dynamic>> _conversationHistory = [];
  bool _isGeneratingVoice = false;
  bool _showVoiceChat = false;

    Future<void> _loadInitialData() async {
    print('DEBUG: _loadInitialData called');
    if (!mounted) return;
    
    // Load avatar configurations
    print('DEBUG: Loading avatar configurations...');
    await context.read<AvatarProvider>().loadConfigurations();
    
    if (!mounted) return;
    
    // Check active configuration after loading
    final avatarProvider = context.read<AvatarProvider>();
    print('DEBUG: After loading - Active configuration: ${avatarProvider.activeConfiguration?.name ?? 'null'}');
    print('DEBUG: After loading - Active configuration personality: ${avatarProvider.activeConfiguration?.personalityType ?? 'null'}');
    print('DEBUG: After loading - Active configuration voice: ${avatarProvider.activeConfiguration?.voiceConfiguration.name ?? 'null'}');
    print('DEBUG: After loading - Active configuration isActive: ${avatarProvider.activeConfiguration?.isActive ?? 'null'}');
    
    // Load voice configurations
    print('DEBUG: Loading voice configurations...');
    await context.read<VoiceProvider>().loadAvailableVoices();
    
    // Initialize personality service with API key
    await _initializePersonalityService();
    
    if (!mounted) return;
    // Add welcome message
    _addWelcomeMessage();
  }

  Future<void> _initializePersonalityService() async {
    try {
      final openAiApiKey = await ApiConfigService.getOpenAiApiKey() ?? '';

      // Initialize personality service
      final apiClient = ApiClient(
        httpClient: http.Client(),
        apiKey: '', // For ElevenLabs compatibility
      );

      _personalityService = PersonalityService.fromApiClient(
        apiClient: apiClient,
        openAiApiKey: openAiApiKey,
      );
    } catch (e) {
      // If initialization fails, create service with empty key (will use fallbacks)
      final apiClient = ApiClient(httpClient: http.Client(), apiKey: '');

      _personalityService = PersonalityService.fromApiClient(
        apiClient: apiClient,
        openAiApiKey: '',
      );
    }
  }

  void _addWelcomeMessage() {
    final avatarProvider = context.read<AvatarProvider>();
    final activeConfig = avatarProvider.activeConfiguration;

    print('DEBUG: _addWelcomeMessage called');
    print('DEBUG: Active configuration: ${activeConfig?.name ?? 'null'}');
    print(
      'DEBUG: Active configuration personality: ${activeConfig?.personalityType ?? 'null'}',
    );
    print(
      'DEBUG: Active configuration voice: ${activeConfig?.voiceConfiguration.name ?? 'null'}',
    );
    print(
      'DEBUG: Active configuration isActive: ${activeConfig?.isActive ?? 'null'}',
    );

    if (activeConfig != null) {
      _addToConversation(
        message:
            'Xin ch√†o! T√¥i l√† ${activeConfig.name}. T√¥i r·∫•t vui ƒë∆∞·ª£c tr√≤ chuy·ªán v·ªõi b·∫°n h√¥m nay. T√¥i c√≥ t√≠nh c√°ch ${activeConfig.personalityDisplayName} v√† s·∫Ω s·ª≠ d·ª•ng gi·ªçng n√≥i ${activeConfig.voiceName} ƒë·ªÉ tr√≤ chuy·ªán c√πng b·∫°n.',
        isUserMessage: false,
        avatarConfig: activeConfig,
        voiceConfig: activeConfig.voiceConfiguration,
      );
    } else {
      _addToConversation(
        message:
            'Xin ch√†o! Ch√†o m·ª´ng b·∫°n ƒë·∫øn v·ªõi m√†n h√¨nh demo chat. Vui l√≤ng ch·ªçn m·ªôt c·∫•u h√¨nh avatar ƒë·ªÉ b·∫Øt ƒë·∫ßu tr√≤ chuy·ªán.',
        isUserMessage: false,
      );
    }
  }

  void _addToConversation({
    required String message,
    required bool isUserMessage,
    AvatarConfiguration? avatarConfig,
    VoiceConfiguration? voiceConfig,
    String? audioId,
  }) {
    setState(() {
      _conversationHistory.add({
        'id': const Uuid().v4(),
        'message': message,
        'timestamp': DateTime.now(),
        'isUserMessage': isUserMessage,
        'avatarConfig': avatarConfig,
        'voiceConfig': voiceConfig,
        'audioId': audioId,
      });
    });

    // Scroll to bottom
    WidgetsBinding.instance.addPostFrameCallback((_) {
      _scrollController.animateTo(
        _scrollController.position.maxScrollExtent,
        duration: const Duration(milliseconds: 300),
        curve: Curves.easeOut,
      );
    });
  }

  void _handleSendMessage() {
    final message = _messageController.text.trim();
    if (message.isEmpty) return;

    // Add user message
    _addToConversation(message: message, isUserMessage: true);

    // Clear input
    _messageController.clear();

    // Simulate avatar response after a delay
    _simulateAvatarResponse(message);
  }

  void _handleVoiceMessageSent(String message) {
    // Add user message from voice
    _addToConversation(message: message, isUserMessage: true);

    // Simulate avatar response after a delay
    _simulateAvatarResponse(message);
  }

  void _handleTextMessageSent(String message) {
    // Add user message from text
    _addToConversation(message: message, isUserMessage: true);

    // Simulate avatar response after a delay
    _simulateAvatarResponse(message);
  }

  void _toggleVoiceChat() {
    setState(() {
      _showVoiceChat = !_showVoiceChat;
    });
  }

  late final PersonalityService _personalityService;

  @override
  void initState() {
    super.initState();

    // Initialize with temporary service (will be properly initialized in _loadInitialData)
    final tempApiClient = ApiClient(httpClient: http.Client(), apiKey: '');
    _personalityService = PersonalityService.fromApiClient(
      apiClient: tempApiClient,
      openAiApiKey: '',
    );

    _loadInitialData();
  }

  @override
  void dispose() {
    _messageController.dispose();
    _scrollController.dispose();
    super.dispose();
  }

  Future<void> _simulateAvatarResponse(String userMessage) async {
    final avatarProvider = context.read<AvatarProvider>();
    final activeConfig = avatarProvider.activeConfiguration;

    if (activeConfig == null) {
      // No active configuration
      _addToConversation(
        message:
            'Xin l·ªói, hi·ªán t·∫°i kh√¥ng c√≥ c·∫•u h√¨nh avatar ho·∫°t ƒë·ªông. Vui l√≤ng quay l·∫°i m√†n h√¨nh ch√≠nh ƒë·ªÉ ch·ªçn m·ªôt c·∫•u h√¨nh.',
        isUserMessage: false,
      );
      return;
    }

    // Simulate thinking delay
    await Future.delayed(const Duration(milliseconds: 1000));

    try {
      // Generate response using API with fallback to hard-coded responses
      final response = await _personalityService.generateResponse(
        userMessage: userMessage,
        personalityType: activeConfig.personalityType,
        voiceId: activeConfig.voiceConfiguration.voiceId,
      );

      _addToConversation(
        message: response,
        isUserMessage: false,
        avatarConfig: activeConfig,
        voiceConfig: activeConfig.voiceConfiguration,
      );
    } catch (e) {
      // Fallback to hard-coded response if API call fails
      final fallbackResponse = _generatePersonalityResponse(
        userMessage,
        activeConfig.personalityType,
      );
      _addToConversation(
        message: fallbackResponse,
        isUserMessage: false,
        avatarConfig: activeConfig,
        voiceConfig: activeConfig.voiceConfiguration,
      );
    }
  }

  /// Fallback method for generating personality responses when API is unavailable
  String _generatePersonalityResponse(
    String userMessage,
    PersonalityType personalityType,
  ) {
    final lowerMessage = userMessage.toLowerCase();

    switch (personalityType) {
      case PersonalityType.happy:
        if (lowerMessage.contains('xin ch√†o') ||
            lowerMessage.contains('hello')) {
          return 'Ch√†o b·∫°n! R·∫•t vui ƒë∆∞·ª£c g·∫∑p b·∫°n! H√¥m nay c·ªßa b·∫°n th·∫ø n√†o? üòä';
        } else if (lowerMessage.contains('c·∫£m ∆°n')) {
          return 'Kh√¥ng c√≥ g√¨ c·∫£! T√¥i lu√¥n s·∫µn l√≤ng gi√∫p ƒë·ª° b·∫°n! B·∫°n c√≥ ƒëi·ªÅu g√¨ kh√°c mu·ªën tr√≤ chuy·ªán kh√¥ng? üòÑ';
        } else {
          return 'Tuy·ªát v·ªùi! T√¥i r·∫•t th√≠ch tr√≤ chuy·ªán v·ªõi b·∫°n! B·∫°n c√≥ mu·ªën chia s·∫ª th√™m ƒëi·ªÅu g√¨ kh√¥ng? üåü';
        }

      case PersonalityType.romantic:
        if (lowerMessage.contains('xin ch√†o') ||
            lowerMessage.contains('hello')) {
          return 'Ch√†o em... T√¥i r·∫•t vui khi ƒë∆∞·ª£c tr√≤ chuy·ªán c√πng em. Em c√≥ v·∫ª ƒë·∫πp r·∫°ng r·ª° h√¥m nay. üíï';
        } else if (lowerMessage.contains('c·∫£m ∆°n')) {
          return 'D·∫°, em kh√¥ng c·∫ßn c·∫£m ∆°n ·∫°. L√†m ƒëi·ªÅu t·ªët cho em khi·∫øn t√¥i h·∫°nh ph·∫≠n. üíñ';
        } else {
          return 'Em c√≥ bi·∫øt... ƒë√¥i khi ch·ªâ c·∫ßn nh√¨n em c∆∞·ªùi ƒë√£ ƒë·ªß l√†m t√¥i h·∫°nh ph·ª•c r·ªìi. ‚ú®';
        }

      case PersonalityType.funny:
        if (lowerMessage.contains('xin ch√†o') ||
            lowerMessage.contains('hello')) {
          return '√ä, ch√†o b·∫°n! T√¥i l√† avatar h√†i h∆∞·ªõc nh·∫•t v≈© tr·ª•! B·∫°n c√≥ tin kh√¥ng? üòú';
        } else if (lowerMessage.contains('c·∫£m ∆°n')) {
          return 'C·∫£m ∆°n c√°i g√¨? T√¥i l√† si√™u anh h√πng, vi·ªác gi√∫p ƒë·ª° ng∆∞·ªùi kh√°c l√†... √† kh√¥ng, t√¥i ch·ªâ l√† avatar th√¥i! üòÇ';
        } else {
          return 'Bi·∫øt kh√¥ng? T√¥i v·ª´a nghƒ© ra m·ªôt c√¢u ƒë√πa... nh∆∞ng t√¥i qu√™n m·∫•t! Gi·ªëng nh∆∞ tr√≠ nh·ªõ c·ªßa t√¥i v·∫≠y ƒë√≥! ü§™';
        }

      case PersonalityType.professional:
        if (lowerMessage.contains('xin ch√†o') ||
            lowerMessage.contains('hello')) {
          return 'Xin ch√†o. T√¥i l√† tr·ª£ l√Ω ·∫£o chuy√™n nghi·ªáp. T√¥i c√≥ th·ªÉ h·ªó tr·ª£ b·∫°n h√¥m nay nh∆∞ th·∫ø n√†o?';
        } else if (lowerMessage.contains('c·∫£m ∆°n')) {
          return 'ƒê√¢y l√† tr√°ch nhi·ªám c·ªßa t√¥i. C·∫£m ∆°n b·∫°n ƒë√£ s·ª≠ d·ª•ng d·ªãch v·ª•.';
        } else {
          return 'D·ª±a tr√™n ph√¢n t√≠ch c·ªßa t√¥i, t√¥i c√≥ th·ªÉ ƒë·ªÅ xu·∫•t m·ªôt s·ªë gi·∫£i ph√°p cho v·∫•n ƒë·ªÅ c·ªßa b·∫°n.';
        }

      case PersonalityType.casual:
        if (lowerMessage.contains('xin ch√†o') ||
            lowerMessage.contains('hello')) {
          return 'Hey! Ch√†o b·∫°n! T·ª•i m√¨nh tr√≤ chuy·ªán nh√©? üòä';
        } else if (lowerMessage.contains('c·∫£m ∆°n')) {
          return 'C√≥ g√¨ ƒë√¢u! T·ª•i m√¨nh l√† b·∫°n m√†! C·ª© vi·ªác nh√©! üëç';
        } else {
          return '·ª™m... th√¨ l√†... b·∫°n ƒëang nghƒ© g√¨ v·∫≠y? Chia s·∫ª v·ªõi tui ƒëi! üòÑ';
        }

      case PersonalityType.energetic:
        if (lowerMessage.contains('xin ch√†o') ||
            lowerMessage.contains('hello')) {
          return 'WOW! CH√ÄO B·∫†N! H√îM NAY C·ª∞C K·ª≤ TUY·ªÜT V·ªúI PH·∫¢I KH√îNG? üéâüéä';
        } else if (lowerMessage.contains('c·∫£m ∆°n')) {
          return 'C·∫¢M ∆†N B·∫†N! B·∫†N L√Ä T·ªêT NH·∫§T! üí™üî•';
        } else {
          return 'B·∫†N C√ì BI·∫æT KH√îNG? M·ªåI NG√ÄY ƒê·ªÄU L√Ä M·ªòT C∆† H·ªòI TUY·ªÜT V·ªúI ƒê·ªÇ VUI V·∫∫! üöÄ‚ú®';
        }

      case PersonalityType.calm:
        if (lowerMessage.contains('xin ch√†o') ||
            lowerMessage.contains('hello')) {
          return 'Xin ch√†o. H√£y t√¨m m·ªôt n∆°i y√™n tƒ©nh v√† th∆∞ gi√£n. Ch√∫ng ta c√≥ th·ªÉ tr√≤ chuy·ªán m·ªôt c√°ch b√¨nh y√™n.';
        } else if (lowerMessage.contains('c·∫£m ∆°n')) {
          return 'ƒê√≥ l√† ƒëi·ªÅu b√¨nh th∆∞·ªùng. H√£y gi·ªØ cho t√¢m tr√≠ b·∫°n thanh th·∫£n.';
        } else {
          return 'H√≠t th·ªü s√¢u... v√† c·∫£m nh·∫≠n s·ª± b√¨nh y√™n trong kho·∫£nh kh·∫Øc n√†y.';
        }

      case PersonalityType.mysterious:
        if (lowerMessage.contains('xin ch√†o') ||
            lowerMessage.contains('hello')) {
          return 'Ch√†o b·∫°n... T√¥i bi·∫øt ƒëi·ªÅu b·∫°n ƒëang t√¨m ki·∫øm... nh∆∞ng b·∫°n c√≥ s·∫µn s√†ng nghe s·ª± th·∫≠t kh√¥ng? üîÆ';
        } else if (lowerMessage.contains('c·∫£m ∆°n')) {
          return 'C·∫£m ∆°n... l√† m·ªôt t·ª´ ng·ªØ ƒë∆°n gi·∫£n cho nh·ªØng ƒëi·ªÅu ph·ª©c t·∫°p... b·∫°n c√≥ hi·ªÉu kh√¥ng? üåô';
        } else {
          return 'M·ªçi th·ª© ƒë·ªÅu c√≥ √Ω nghƒ©a... n·∫øu b·∫°n bi·∫øt c√°ch nh√¨n... b√≠ m·∫≠t n·∫±m trong t·∫ßm tay b·∫°n... ‚ú®';
        }
    }
  }

  Future<void> _handleSynthesizeSpeech() async {
    final avatarProvider = context.read<AvatarProvider>();
    final voiceProvider = context.read<VoiceProvider>();
    final activeConfig = avatarProvider.activeConfiguration;

    if (activeConfig == null) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text('Vui l√≤ng ch·ªçn m·ªôt c·∫•u h√¨nh avatar tr∆∞·ªõc'),
        ),
      );
      return;
    }

    if (_conversationHistory.isEmpty ||
        _conversationHistory.last['isUserMessage'] == true) {
      ScaffoldMessenger.of(context).showSnackBar(
        const SnackBar(
          content: Text(
            'Vui l√≤ng g·ª≠i m·ªôt tin nh·∫Øn tr∆∞·ªõc khi t·ªïng h·ª£p gi·ªçng n√≥i',
          ),
        ),
      );
      return;
    }

    setState(() {
      _isGeneratingVoice = true;
    });

    try {
      // Get the last avatar message
      final lastAvatarMessage = _conversationHistory.lastWhere(
        (msg) => msg['isUserMessage'] == false,
        orElse: () => <String, dynamic>{},
      );

      if (lastAvatarMessage.isNotEmpty) {
        final message = lastAvatarMessage['message'] as String;
        final messageId = lastAvatarMessage['id'] as String;

        // Use the voice provider to synthesize and play audio
        final audioId = await voiceProvider.synthesizeAndPlayAudio(message);

        if (audioId != null) {
          // Update the conversation history with the audio ID
          if (mounted) {
            setState(() {
              final index = _conversationHistory.indexWhere(
                (msg) => msg['id'] == messageId,
              );
              if (index != -1) {
                _conversationHistory[index]['audioId'] = audioId;
              }
            });

            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(
                content: Text('ƒê√£ t·ªïng h·ª£p v√† ph√°t gi·ªçng n√≥i th√†nh c√¥ng!'),
              ),
            );
          }
        } else {
          if (mounted) {
            ScaffoldMessenger.of(context).showSnackBar(
              const SnackBar(
                content: Text(
                  'Kh√¥ng th·ªÉ ph√°t gi·ªçng n√≥i. Vui l√≤ng ki·ªÉm tra c√†i ƒë·∫∑t.',
                ),
              ),
            );
          }
        }
      }
    } catch (e) {
      if (mounted) {
        ScaffoldMessenger.of(context).showSnackBar(
          SnackBar(content: Text('L·ªói khi t·ªïng h·ª£p gi·ªçng n√≥i: $e')),
        );
      }
    } finally {
      setState(() {
        _isGeneratingVoice = false;
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final avatarProvider = context.watch<AvatarProvider>();

    return Scaffold(
      appBar: AppBar(
        title: const Text('Demo Chat v·ªõi Avatar'),
        backgroundColor: Theme.of(context).colorScheme.surface,
        foregroundColor: Theme.of(context).colorScheme.onSurface,
        elevation: 0,
        actions: [
          IconButton(
            icon: const Icon(Icons.refresh),
            onPressed: _loadInitialData,
            tooltip: 'T·∫£i l·∫°i',
          ),
          IconButton(
            icon: const Icon(Icons.info_outline),
            onPressed: () => _showInfoDialog(context),
            tooltip: 'Th√¥ng tin',
          ),
        ],
      ),
      body: Column(
        children: [
          // Active configuration banner
          if (avatarProvider.hasActiveConfiguration)
            _buildActiveConfigBanner(avatarProvider.activeConfiguration!),

          // Conversation area
          Expanded(child: _buildConversationArea()),

          // Input area
          _buildInputArea(),
        ],
      ),
    );
  }

  Widget _buildActiveConfigBanner(AvatarConfiguration config) {
    return Container(
      width: double.infinity,
      margin: const EdgeInsets.all(8),
      padding: const EdgeInsets.all(12),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.primaryContainer,
        borderRadius: BorderRadius.circular(12),
        border: Border.all(
          color: Theme.of(context).colorScheme.primary.withValues(alpha: 0.3),
        ),
      ),
      child: Row(
        children: [
          AvatarDisplayWidget(
            avatarConfig: config,
            size: 40,
            showAnimation: false,
          ),
          const SizedBox(width: 12),
          Expanded(
            child: Column(
              crossAxisAlignment: CrossAxisAlignment.start,
              children: [
                Text(
                  'Avatar ƒëang ho·∫°t ƒë·ªông: ${config.name}',
                  style: Theme.of(context).textTheme.titleMedium?.copyWith(
                    fontWeight: FontWeight.bold,
                    color: Theme.of(context).colorScheme.onPrimaryContainer,
                  ),
                ),
                const SizedBox(height: 2),
                Text(
                  'T√≠nh c√°ch: ${config.personalityDisplayName} ‚Ä¢ Gi·ªçng: ${config.voiceName}',
                  style: Theme.of(context).textTheme.bodySmall?.copyWith(
                    color: Theme.of(
                      context,
                    ).colorScheme.onPrimaryContainer.withValues(alpha: 0.8),
                  ),
                ),
              ],
            ),
          ),
        ],
      ),
    );
  }

  Widget _buildConversationArea() {
    return ListView.builder(
      controller: _scrollController,
      padding: const EdgeInsets.all(8),
      itemCount: _conversationHistory.length,
      itemBuilder: (context, index) {
        final message = _conversationHistory[index];
        return ChatMessageWidget(
          message: message['message'] as String,
          isUserMessage: message['isUserMessage'] as bool,
          timestamp: message['timestamp'] as DateTime,
          avatarConfig: message['avatarConfig'] as AvatarConfiguration?,
          voiceConfig: message['voiceConfig'] as VoiceConfiguration?,
          audioId: message['audioId'] as String?,
        );
      },
    );
  }

  Widget _buildInputArea() {
    return Container(
      padding: const EdgeInsets.all(16),
      decoration: BoxDecoration(
        color: Theme.of(context).colorScheme.surface,
        border: Border(
          top: BorderSide(
            color: Theme.of(context).colorScheme.outline.withValues(alpha: 0.2),
          ),
        ),
      ),
      child: Column(
        children: [
          // Voice chat toggle button
          Row(
            children: [
              Expanded(
                child: Text(
                  _showVoiceChat ? 'Chat Voice ƒê√£ B·∫≠t' : 'Chat Voice ƒê√£ T·∫Øt',
                  style: TextStyle(
                    color: Theme.of(context).colorScheme.onSurfaceVariant,
                    fontWeight: FontWeight.w500,
                  ),
                  textAlign: TextAlign.center,
                ),
              ),
              const SizedBox(width: 8),
              Container(
                decoration: BoxDecoration(
                  color: _showVoiceChat
                      ? Theme.of(context).colorScheme.primary
                      : Theme.of(context).colorScheme.surfaceContainerHighest,
                  borderRadius: BorderRadius.circular(20),
                ),
                child: IconButton(
                  icon: Icon(
                    _showVoiceChat ? Icons.chat : Icons.mic,
                    color: _showVoiceChat
                        ? Theme.of(context).colorScheme.onPrimary
                        : Theme.of(context).colorScheme.onSurfaceVariant,
                  ),
                  onPressed: _toggleVoiceChat,
                  tooltip: _showVoiceChat ? 'T·∫Øt Chat Voice' : 'B·∫≠t Chat Voice',
                ),
              ),
            ],
          ),

          const SizedBox(height: 12),

          // Voice chat widget (when enabled)
          if (_showVoiceChat)
            VoiceChatWidget(
              onVoiceMessageSent: _handleVoiceMessageSent,
              onTextMessageSent: _handleTextMessageSent,
              height: 120,
            ),

          // Traditional input area (when voice chat is disabled)
          if (!_showVoiceChat)
            Column(
              children: [
                Row(
                  children: [
                    Expanded(
                      child: TextField(
                        controller: _messageController,
                        decoration: InputDecoration(
                          hintText: 'Nh·∫≠p tin nh·∫Øn c·ªßa b·∫°n...',
                          hintStyle: TextStyle(
                            color: Theme.of(context)
                                .colorScheme
                                .onSurfaceVariant
                                .withValues(alpha: 0.6),
                          ),
                          border: OutlineInputBorder(
                            borderRadius: BorderRadius.circular(25),
                            borderSide: BorderSide(
                              color: Theme.of(
                                context,
                              ).colorScheme.outline.withValues(alpha: 0.3),
                            ),
                          ),
                          enabled: !_isGeneratingVoice,
                          contentPadding: const EdgeInsets.symmetric(
                            horizontal: 20,
                            vertical: 12,
                          ),
                        ),
                        onSubmitted: (_) => _handleSendMessage(),
                        textInputAction: TextInputAction.send,
                      ),
                    ),
                    const SizedBox(width: 12),

                    // Voice synthesis button
                    Container(
                      decoration: BoxDecoration(
                        color: Theme.of(context).colorScheme.primary,
                        borderRadius: BorderRadius.circular(25),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withValues(alpha: 0.1),
                            blurRadius: 4,
                            offset: const Offset(0, 2),
                          ),
                        ],
                      ),
                      child: IconButton(
                        icon: _isGeneratingVoice
                            ? const SizedBox(
                                width: 20,
                                height: 20,
                                child: CircularProgressIndicator(
                                  strokeWidth: 2,
                                  valueColor: AlwaysStoppedAnimation<Color>(
                                    Colors.white,
                                  ),
                                ),
                              )
                            : const Icon(Icons.record_voice_over),
                        onPressed: _isGeneratingVoice
                            ? null
                            : _handleSynthesizeSpeech,
                        tooltip: 'T·ªïng h·ª£p gi·ªçng n√≥i',
                        color: Theme.of(context).colorScheme.onPrimary,
                      ),
                    ),

                    const SizedBox(width: 8),

                    // Send button
                    Container(
                      decoration: BoxDecoration(
                        color: Theme.of(context).colorScheme.secondary,
                        borderRadius: BorderRadius.circular(25),
                        boxShadow: [
                          BoxShadow(
                            color: Colors.black.withValues(alpha: 0.1),
                            blurRadius: 4,
                            offset: const Offset(0, 2),
                          ),
                        ],
                      ),
                      child: IconButton(
                        icon: const Icon(Icons.send),
                        onPressed: _handleSendMessage,
                        tooltip: 'G·ª≠i tin nh·∫Øn',
                        color: Theme.of(context).colorScheme.onSecondary,
                      ),
                    ),
                  ],
                ),

                const SizedBox(height: 8),

                // Instructions
                Text(
                  'Nh·∫≠p tin nh·∫Øn v√† g·ª≠i ƒë·ªÉ xem avatar ph·∫£n h·ªìi. S·ª≠ d·ª•ng n√∫t t·ªïng h·ª£p gi·ªçng n√≥i ƒë·ªÉ ph√°t √¢m thanh.',
                  style: TextStyle(
                    color: Theme.of(
                      context,
                    ).colorScheme.onSurfaceVariant.withValues(alpha: 0.6),
                    fontSize: 12,
                  ),
                  textAlign: TextAlign.center,
                ),
              ],
            ),
        ],
      ),
    );
  }

  void _showInfoDialog(BuildContext context) {
    showDialog(
      context: context,
      builder: (context) => AlertDialog(
        title: const Text('Th√¥ng tin Demo Chat'),
        content: const Column(
          mainAxisSize: MainAxisSize.min,
          crossAxisAlignment: CrossAxisAlignment.start,
          children: [
            Text(
              '‚Ä¢ Demo n√†y cho th·∫•y c√°ch avatar c√≥ t√≠nh c√°ch kh√°c nhau ph·∫£n h·ªìi tin nh·∫Øn.',
            ),
            Text('‚Ä¢ M·ªói t√≠nh c√°ch c√≥ c√°ch tr·∫£ l·ªùi v√† gi·ªçng n√≥i kh√°c nhau.'),
            Text(
              '‚Ä¢ N√∫t t·ªïng h·ª£p gi·ªçng n√≥i s·∫Ω ph√°t √¢m thanh t·ª´ tin nh·∫Øn cu·ªëi c√πng c·ªßa avatar.',
            ),
            Text(
              '‚Ä¢ B·∫°n c·∫ßn ch·ªçn m·ªôt c·∫•u h√¨nh avatar ho·∫°t ƒë·ªông ƒë·ªÉ s·ª≠ d·ª•ng t√≠nh nƒÉng n√†y.',
            ),
            Text(
              '‚Ä¢ ƒê√¢y l√† phi√™n b·∫£n demo, trong ·ª©ng d·ª•ng th·ª±c t·∫ø s·∫Ω k·∫øt n·ªëi v·ªõi ElevenLabs API.',
            ),
          ],
        ),
        actions: [
          TextButton(
            onPressed: () => Navigator.of(context).pop(),
            child: const Text('ƒê√≥ng'),
          ),
        ],
      ),
    );
  }
}
